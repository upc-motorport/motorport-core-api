// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motorport.Infrastructure.Database;

namespace Motorport.Infrastructure.Migrations
{
    [DbContext(typeof(AzureDbContext))]
    [Migration("20191119062351_AddedMechanicalWorkShopAndOrganization")]
    partial class AddedMechanicalWorkShopAndOrganization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Motorport.Domain.Models.MechanicalWorkshop", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<double>("AverageRate");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MechanicalWorkshops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AverageRate = 4.0,
                            City = "Lima",
                            Country = "Peru",
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 859, DateTimeKind.Local).AddTicks(2051),
                            Department = "Santiago de Surco",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 859, DateTimeKind.Local).AddTicks(2054),
                            Name = "AutoData S.A.C",
                            OrganizationId = 1,
                            Street = "Las Casuarinas",
                            StreetNumber = "231",
                            ZipCode = "15023"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            AverageRate = 4.5,
                            City = "Lima",
                            Country = "Peru",
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 859, DateTimeKind.Local).AddTicks(4326),
                            Department = "Santiago de Surco",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 859, DateTimeKind.Local).AddTicks(4329),
                            Name = "AutoSolution",
                            OrganizationId = 1,
                            Street = "Mariano Eduardo de Rivero y Ustariz",
                            StreetNumber = "123",
                            ZipCode = "15023"
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("SubscriptionId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(4642),
                            ExpirationDate = new DateTime(2020, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(4633),
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(4643),
                            Role = "Owner",
                            StartDate = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(4631),
                            SubscriptionId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.Organization", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("BussinessName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ThumbnailImage");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            BussinessName = "MotorPort SAC",
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(9133),
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(9134),
                            Ruc = "1002419"
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(2618),
                            FirstName = "Manuel Augusto",
                            IdentificationNumber = "81058541",
                            LastName = "Alvarado Estanga",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(2623),
                            ShortName = "Manuel Alvarado",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Cost")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PlanType")
                        .IsRequired();

                    b.Property<int>("UsersLimit");

                    b.HasKey("Id");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 745, DateTimeKind.Local).AddTicks(1149),
                            Description = "Basic Plan",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 745, DateTimeKind.Local).AddTicks(7919),
                            Name = "Basic",
                            PlanType = "Basic",
                            UsersLimit = 1
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<int>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 747, DateTimeKind.Local).AddTicks(7939),
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 747, DateTimeKind.Local).AddTicks(7942),
                            PlanId = 1
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 857, DateTimeKind.Local).AddTicks(9298),
                            Email = "alvarado.manuel@live.com",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 857, DateTimeKind.Local).AddTicks(9308),
                            Password = "$2b$10$7jeTV90lNzw8zrQJ3hKi1ORqOKDbtl8mh64ssmMEBZxFfO/YJSCc."
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200);

                    b.Property<int?>("Kilometers");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("RegistrationPlate")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("SubscriptionId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Brand = "Chevrolet",
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(7009),
                            Kilometers = 0,
                            Model = "Camaro",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(7013),
                            RegistrationPlate = "ABC123",
                            SubscriptionId = 1,
                            Type = "Car",
                            Year = 2014
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Brand = "Chevrolet",
                            CreatedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(8855),
                            Kilometers = 0,
                            Model = "Bolt",
                            ModifiedAt = new DateTime(2019, 11, 19, 1, 23, 50, 858, DateTimeKind.Local).AddTicks(8859),
                            RegistrationPlate = "DCE321",
                            SubscriptionId = 1,
                            Type = "Car",
                            Year = 2014
                        });
                });

            modelBuilder.Entity("Motorport.Domain.Models.MechanicalWorkshop", b =>
                {
                    b.HasOne("Motorport.Domain.Models.Organization", "Organization")
                        .WithMany("MechanicalWorkshops")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Motorport.Domain.Models.Membership", b =>
                {
                    b.HasOne("Motorport.Domain.Models.Subscription", "Subscription")
                        .WithMany("Memberships")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Motorport.Domain.Models.User", "User")
                        .WithOne("Membership")
                        .HasForeignKey("Motorport.Domain.Models.Membership", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Motorport.Domain.Models.Person", b =>
                {
                    b.HasOne("Motorport.Domain.Models.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("Motorport.Domain.Models.Person", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Motorport.Domain.Models.Subscription", b =>
                {
                    b.HasOne("Motorport.Domain.Models.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Motorport.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("Motorport.Domain.Models.Subscription", "Subscription")
                        .WithMany("Vehicles")
                        .HasForeignKey("SubscriptionId");
                });
#pragma warning restore 612, 618
        }
    }
}
